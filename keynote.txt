
Keynote Speech at Dconf - 9 May 2019

[Slide 1]

I'm curious to know.  Who here is from London?  UK?  N America?  Asia?  Africa?  Somewhere else?

Who uses D at work regularly?

Who would like to ?

[Slide 2 - Alt Investment Management]

I would like to share our experience of using an emerging programming language at Symmetry Investments
and then to explore together anything that we could consider that might be useful for the broader
development of the language and the community.

I'm responsible amongst other things for technology across Symmetry, but I speak for myself in this talk.

My career - including at Symmetry - has been in the alternative investment management domain.  What
does alternative mean?  To me, alternative has the same connotations that it does when applied in
other creative fields - alternative music, alternative media, alternative literature.

Alternative in our industry means that you can avoid doing the stupid things that very smart people
are forced to do by their context, by their institutional constraints.  If everybody does the same
thing and you understand why they do it like that, but you can see a better way then in an alternative
domain you have a choice - you can create a new context where it's possible to do things differently.

That's what I think the word alternative means.  I think for a while in our industry we forgot that,
and I think Symmetry is part of a new wave of creativity that recognizes that if you open your
eyes then to quote Andrei - there is treasure everywhere.

When does life have its beginnings?  I think sometimes much earlier than people often realise.

So I'm going to go back to 2004 when I was co-head of fixed income trading for a large American hedge
fund in London.  I should perhaps say that I'm not a programmer by profession.  I started programming
in 1983 and my first 'open source' - as we would call it today - was to a routing algorithm in
Tom Jenning's Fidonet in 1989.  But then I discovered economics - and human behaviour is a much more
challenging subject than the behaviour of computers - and for most of my career since graduating I
have been a trader.

In 2004 the group I worked in began back in 1999 with limited resources.  So things were improvised
in a hurry and our trading tools were built in a combination of C++ and Perl.  The fascinating thing
about financial markets is that they are always changing, and so whatever you do, and however you do
it if you are going to be working on the technology component of a money management business then
it's important to be able to adapt.

"The wonderful thing about this place is that requirements are perfectly and beautifully articulated
and there are no unexpected changes", said nobody who works for a money management company, ever.
Partly that's a consequence of how traders are - they change their minds when circumstances change.
But mostly it's because markets are intrinsically generative and dynamic.  Just when you start to 
think you have figured them out, they change again.

So the owner of the company I worked at back then began his own career in providing programming services.  He
read a lot on the internet and he recognized that Perl is often a source of considerable technical
debt, which is true.  So the dictat came down that everything was to be rewritten from Perl to C++.
Consequence being that development of new capability ceased, and in the meantime markets kept
changing.  By the time the porting had finished there was nobody left who liked to look at the world
through these tools and so the systems were moved to a product from an outside vendor - Murex - one
that notoriously has its own challenges.

There's nothing for learning like experiencing something personally.  Sometimes something sticks
with you - I didn't know what the answer was to such a problem, but I certainly knew that I didn't
want to be in the position again of having to choose between the productivity of rapid prototyping
and the seriousness required for managing other peoples' money within an institutional context.

Our founder at Symmetry Investments, Feng Guo, is thirty eight years old and is a highly unusual
person.

I came to become involved at Symmetry initially just as a consultant working from my home office.
I was going to hire a programmer from the D community as a remote developer.  John Colvin, who
will probably be familiar to quite a few of you.  I suggested to Feng and he said - 24?  Don't
you think that's a bit too early in his career?  I sent him a link to one of John's Dconf talks,
expecting him to read the abstract, but he watched the whole talk and then the next time we
spoke he said "why haven't you hired him yet?".  "Well, Feng, I was waiting for you to sign

[Slide 3 - Win/win]

So Feng has introduced the Symmetry win-win principle.  That's something different from the
simple anglo conception of win-win - it's a symbol that stands for many things.  One of them
is about the dialectical reconciliation of seeming opposites.  Linked to that is the idea of
a refusal to accept premature compromise.

What does it mean to accept premature compromise?  Well if you compromise between two options
then implicitly you are assuming that you have to choose.

[Slide 4 - efficient frontier]
In economics there is the idea of an efficient frontier.   By assumption you are
at the optimum.  So since you are at the optimum and cannot make any more improvements then
you can't get one good thing without sacrificing another good thing.  If you are a worker then
you can get paid more but only if you work more hours.  Or you can work less hours but only
if you are willing to get paid less too.  If you're at war and expanding social spending then
after a certain point you can make more guns or you can make more butter to feed people but
you cannot do both.

But that's an assumption, and both for programming itself, and for an early-stage firm in
the highly-dynamic alternative investment management industry it simply isn't true.  How
can we possibly be an optimum?  That requires perfect knowledge, not just about the present,
but also about the future distribution of possible outcomes.  If you are ever truly surprised
then you can't have been in any kind of optimum before, because surprise is an indication
of a context of Knightian or radical uncertainty meaning that you cannot have known the
things needed in order to optimise.

There's a joke told by Kenneth Boulding.   A physicist, a chemist, and an economist who were
stranded on a desert island with no implements and a can of food. The physicist and the
chemist each devised an ingenious mechanism for getting the can open; the economist merely
said, "Assume we have a can opener"!

But if you're doing something very practical, it's best to be careful about what you assume.

So when I hear that you have to choose, I get suspicious.  Why do I have to choose?  I
want both - to have my cake and eat it too.

[Slide 5 	- compromises]

What kind of choices do we often make in our technical decisions?
1. Productivity or performance (Python vs C)
2. Expressiveness or readability
3. Modeling power or plasticity
4. Adaptability to change alongst planned dimensions versus brittleness in the face of change
you did not expect

Productivity, performance, or plasticity?  Yes please - they are all very important to  me.
No - I mean which of those do you want.  All of them.

[Slide 6 - Cost and Choice]

There's another idea from economics about the theory of the firm.  Economic models often
assume that firms are profit-maximising.

Who here has worked in a firm?  Ever see choices and behaviours that have nothing to do
with what's best for shareholders and deviate from rationality because of age-old
human fallibilities, weaknesses, and so on?

Who here has worked for someone else and then run their own business, or been part of
a family business?  Did you try to do things differently from when you were an employee?
Try to avoid the suboptimal outcomes that you just had to learn to live with when
you worked for the man?

Economists call the deviation from economic rationality - profit maximisation - that
take place when you have managers who aren't owners of the firm - or agents for the
real owners (shareholders) - X-inefficiency.  X because who knows what else to call it.
Naming things is hard.

What kind of deviations are common?  Well one of them is that there's 
the best decision for the company and the decision that will make you look best.  They
aren't the same thing.

Life is risk.  When Brian Acton  decided to start WhatsApp it was a pretty risky decision.  It
might not have worked out - most people would have said the odds were against it.  But
it turned out pretty well for him even though he seemed to increase his risk by
using a weird language called Erlang that wasn't exactly well known to suits with
money.  He sold out for $19bn to Facebook.  Was that a good decision to start WhatsApp
adjusted for the risk of failure?  I would say so, but if it had failed what would
people have said?

Well for Brian Acton X probably not many would have been interested because he wasn't that well-
known in the industry.  Actually just before starting WhatsApp he had applied for a job
at Facebook and they had turned him down - world's most expensive hiring mistake?

But consider the same sort of decision to take a risk by doing something that
might not work out but in a corporate context.

If you choose to do something that's unconventional according to the ideas of
people surrounding you then that means it is socially risky.  Even if objectively
speaking a neutral and an observer with a considerable degree of expertise would
judge that it was actually quite a safe choice, if the people around you can't see
that then for all intents and purposes it's a risky decision.

If you do something unconventional and fail then in most contexts you are in a lot
of trouble.  How could he not have seen that X would be a problem?  Does anyone else
use this thing?  It's not on the list I got from Gartner of best-practice industry
solutions.

On the other hand.  Suppose it works.  You might get a bit of recognition and an
increase in pay from the success, but it will be incremental and is unlikely to
compensate you for the social risk created by making an unconventional choice.

So if I had the role of a regular manager at a company that thought very
conventionally then even though I would hold the same views about the commercial
benefits of D as I do today, I do not think I would have used D much at work.
It's just not worth the inevitable criticism and social consequences of sticking
out.

Maybe quite a few companies are like that; maybe many companies; maybe almost
all large companies.  But plenty of companies are not like that.

Small and medium sized businesses are important in the global economy.  In the
US small businesses create 62% of net new jobs.   The impressive people that
you hear from at S&P 500 companies - the average lifespan of a company listed
in the S&P 500 stock market index is less than 20 years.

Now it's not that small and medium companies are necessarily open to doing
things in a way that makes sense but is unconventional, but quite a few of them
are.  Large companies tend to have bureaucracy and bureaucracy means
committees and it is very difficult to be a relatively early adopter of a
technology that doesn't look compelling enough based on a box-ticking contest.

D is plastic?  That's interesting, Mr Isharc, but what's your evidence for that.
I haven't seen a Gartner - the industry consultants - report on it.
Do Goldman Sachs use D?

[Slide 7 - Ownership Principles]


Symmetry is a bit different.  We try to think about decisions within the firm
from the point of view of an entrepreneur or investor.  So the first question
should be what would I do if I owned the business?  Now in practice not
everyone owns the business so the second question should be considering this
practical reality, how can I explain the social factors beforehand and figure
out a plan to address them.

After I became involved at Symmetry, I did something I would never recommend
to anyone else in my position.

Slide 8 - SIL SQL
We had a bunch of risk reports written in SQL.  Understand that a risk report
isn't just any old report.  It's something critical if you manage money - you
need to understand the risk of your portfolio.

I'm pro-SQL - it's a pretty
good language for its domain.  But the domain of financial market risk
calculations - that's something more specific than what SQL was designed for.
VBA generating SQL with string concatenation...

That sounds horrible of course, but at least VBA has loops.  (SQL has views
too, but it seems only more expert people use them).  No loops.  One report
was 10,000 lines of copy/paste.  We no longer ourselves understood the
report and it was a drag on adapting to change because it was so difficult
to make changes.

It's easy enough if you have financial resources to re-write a report like
that.  Just find someone who will hold their nose for money, figure out
what the old one was doing, and write it properly.  Any language would have
done - SQL, Python, or even QBasic.

But how do you prevent the same thing happening again?  That is not so easy.
Because practitioners are not programmers and write programs amidst
constraints - they need to accomplish a business goal and they don't think
of themselves as programmers by trade or in every moment how they are doing
things or the consequences down the line of doing so.

[Slide 9 - SIL]
So I did the indefensible and we wrote our own domain-specific functional
programming language - Symmetry Integration Language.

Language design - it's not a field you just pick up.  And in truth we
had no spec, no documentation and no project management.  John Colvin
worked part time on it and Dmitry Popov worked a few weeks at a time
here and there.  Probably one man year total investment to have the first
usable version though obviously it's been refined a bit since that alpha.

I wrote a Forth in C early in my teens.  That was one of the hardest
programming projects I have done relative to my capabilities at the time.
And a threaded interpretive language is easy because you build it up
in itself from a low level.

I wasn't going to do what was a reasonably ambitious project for us
at the time given our resources.  Then I had dinner with Bastiaan and
heard how he was using Pegged to translate Extended Pascal to D.  Well
Bastiaan is very smart but surely given my own capabilities it must
be possible to manage this much humbler project of writing a little DSL.

Writing your own language is one thing.  Writing a language and a
standard library is another.  There's absolutely no way we could have
managed to write a useful standard library ourselves from scratch, not
given the amount of people we have in relation to the work there is.

Steve Jobs said "Good artists create, Great artists steal".  Well,
perhaps even somebody of more humble capabilities can learn from that.
So for our standard library we stole Phobos.  We just introspect
at compile time, wrap the function up in an algebraic and register it
in the symbol table.

Here's what we do for math functions for example.  It's actually
more automated than that if you want it to be, but the full autowrap
isn't necessary.

[Slide 10 - wrapping]

[Slide 11 - sloc]
So SIL is in production, and most of our reports have been rewritten
in SIL.  That 10,000 line monster is now about 1,000 lines - most of
which is configuration data, and it's easy enough to understand,
reason about and change.

[Slide 12 - example of SIL]

[Slide 13 - sneaky purpose: cultural transformation]
Sneaky Purpose – cultural transformation
 Version control
 Code review
 Testing
 Declarative Programming
 Integration between practitioners and programmers / transformation of cultural values


[Slide 14 - Secrets]
We've been taught that truth is conventional, but it's simply something that people agree on. What's important is to discover a new truth." 
All great businesses are based on secrets.
  – Peter Thiel

The best secrets are hidden in plain sight

[Slide 15 - where do secrets come from]

Where do secrets come from?  how does innovation happen in organisations?

Networks relating to people - that's a very interesting topic.

[Slide 16 - Small Worlds]

There was a study done by a chap called Granovetter in I think the
1960s.  Think about the last time you were looking for a new job.
If you heard about the opportunity, did your close friend tell you
about it?  Or is it more like the friend of a friend of your
sister's cousin.

[Slide 17 - Small World Graph]
Well, it turns out that you are much more likely to hear valuable
information from the people at the fringes of your network.  Your
friends you talk to every week know just the same things you do.

Here's an example from a paper by Ronald Burt on Structural Holes
and Good Ideas.

The seven people connected to James are densely connected withone
another within cluster B. The seven people connected to Robert are
not connected with one another and are drawn from separate groups
A,B, and C. Where James is positioned to integrate the work of
people whohave much in  common, Robert is positioned to benefit
from differencesbetween people who vary in their behavior and opinions.
Where James is  positioned  to  drive  variation  out  of  group  B,
 Robert  is  positioned to introduce  into  group  B  variation
from  groups  A  and  C,  with  which heis familiar. Given greater
homogeneity within than between groups, peoplewhose networks bridge
the structural holes between groups have earlieraccess to a broader
diversity of information and have experience in trans-lating
information across groups. 


[Slide 22 - unexpected benefits]
For us then I'd highlight the following unexpected aspects of what
it's like to use D - I deliberately don't use the word feature - that
have commercial importance.


1. Courageousness / Span of control/resourcefulness
2. Information Arbitrage
3. Talent
4. Marshalling / type conversion for glue
5. Plasticity

3. All the usability features that people rightly complain about -
 they also act as a filter, a moat, and that's why it's hard to find
somebody at dconf who is not at least a decent programmer and why there is
a high concentration of very good programmers in the community.
So by adopting D for other reasons, we have ended up tapping
into a pool of talent that would have been difficult to find
another way.

4. D excels for marshalling, type conversion and interoperability
without manually-generated boilerplate that needs to be read
by someone getting familiar with the project.  SIL exposes
Phobos to the language, but it also talks to Excel, Python, C++
code and soon C#.  What's most striking is the code that isn't
there - generated at compile-time but that never hits disk.

5. D has a very plastic quality.  I told one CTO in the industry
about a sentiment analysis project I was doing.  He said ooh
you had better spend a couple of weeks mapping out your class
hierarchy.  I said Fred I don't use classes.  Just structs
and templated functions that adapt to what's passed in - design
by introspection.

In particular we have found that it's possible to write a proof
of concept very quickly and then reshape that again and again
on it's way towards being production code.  If you look at the
code for SIL in production we use you can still see bits I
wrote in a hurry on Christmas Day on holiday with my wife.

So in conclusion I would say that I would not suggest most
people use D.  If you have to get a committee to approve it,
there's a good chance D is not for you.  But if you're a creative
company undertaking a different approach - the word disruptive
has slightly negative connotations - then I do not know where
else you will find a language and language community that can
offer what D brings.

[Slide 23 - Hiring]
We're hiring around 15 more people.

Questions?







